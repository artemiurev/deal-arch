@startmindmap problems
*[#LightCoral] Основные проблемы создания распределенных микросервисов
**[#LightSteelBlue] Проблема 1: Считать микросервисы серебряной пулей
	*** Причины не использовать микросервисы: монлиты проще и они не немасштабируемые, микросервисы реализовать сложнее.
	*** Веские причины использовать микросервисы: 
        **** больше возможностей масштабирования
        **** независимая возможность развертывания
        **** изолированость областей сбоев и ошибок
	*** Microservice vs Monolith: микросервисы имеют высокую доступность и событийную согласованность(eventual consistency), монолиты имеют низкую доступность и немедленную согласованность
**[#LightSteelBlue] Проблема 2: Использование общего хранилища данных в микросервисах
	*** Аналогично использование общих моделей данных в микросервисах
**[#LightSteelBlue] Проблема 3: Слишком большие микросервисы
	*** Domain Driven Design
		**** Bounded context
	*** Признак: микросервис слишком молчалив.
**[#LightSteelBlue] Проблема 4: Слишком маленькие микросервисы
	*** Признак: микросервис слишком болтливый.
**[#LightSteelBlue] Проблема 5: Создание микросервиса с "чистого листа"
	*** Migrating from monolith to microservices: Big bang, Evolution, Strangler Fig
**[#LightSteelBlue] Проблема 6: Связывание микросервисов через снижение затрат, например сквозные модули
**[#LightSteelBlue] Проблема 7: Синхронные коммуникации между микросервисами
**[#LightSteelBlue] Проблема 8: Критические изменения в контрактах событий
	*** 01 Никаких новых обязательных полей, только опциональные (с документированными дефолтными значениями).
	*** 02 Неиспользуемые поля игнорируются (но пересылаются далее в другие микросервисы)
	*** 03 Consumers опциональных полей используют дефолтные значение, когда поля пропущенны.
	*** 04 Когда 1-3 не может быть выполнено, это новый тип события.
**[#LightSteelBlue] Проблема 9: Не автоматизированы сборка и новые релизы
	*** CI/CD это хорошая точка старта и точно то что нужно сделать как можно раньше
**[#LightSteelBlue] Проблема 10: Изменение API микросервисов влияет на другие микросервисы неявно.
**[#LightSteelBlue] Проблема 11: Mismatched teams
	*** Очень часто структуры ИТ систем повторяют организационные структуры организаций.
**[#LightPink] Distributed Monolith - часто это результат и это худшее решение.
	*** Distributed Monolith Architecture 1 - Not using event bus to communicate between different services
	*** Distributed Monolith Architecture 2 - Having one shared database among all services
	*** Good vs Bad. Good: modular monolith, microserice. Bad: ball of mud monolith, distributed monolith
@endmindmap